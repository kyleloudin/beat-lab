{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport * as Tone from \"tone\";\nexport default {\n  data: () => ({\n    bpm: 40,\n    interval: null,\n    isPlaying: false,\n    fileName: \"\",\n    recording: [],\n    checked: true,\n    barLength: 0,\n    noteObject: {\n      fileName: \"\",\n      time: \"\"\n    },\n    notes: []\n  }),\n  computed: {\n    color() {\n      if (this.bpm < 100) return \"indigo\";\n      if (this.bpm < 125) return \"teal\";\n      if (this.bpm < 140) return \"green\";\n      if (this.bpm < 175) return \"orange\";\n      return \"red\";\n    },\n    animationDuration() {\n      return `${60 / this.bpm}s`;\n    }\n  },\n  methods: {\n    findBeats() {\n      return 60 / this.bpm * 1000 * this.noteValue;\n    },\n    activateMetronome() {\n      let metronomeClick = new Audio(require(\"../assets/metronome.wav\"));\n      if (this.isPlaying) {\n        metronomeClick.play();\n        let time = 60 / this.bpm * 1000;\n        setTimeout(this.activateMetronome, time);\n      } else if (!this.isPlaying) {\n        metronomeClick.pause();\n        metronomeClick = new Audio(require(\"../assets/metronome.wav\"));\n      }\n    },\n    findClosestValue(inputTime) {\n      let startTime = Date.now();\n      let dataSet = [startTime];\n      let timeBetweenNotes = 60000;\n      for (let i = 1; i <= 7; i++) {\n        (startTime + 60000 / (this.bpm * i)).push(dataSet);\n      }\n      let closestValue = dataSet[0];\n      let closestDifference = Math.abs(inputTime - dataSet[0]);\n      for (let i = 1; i < dataSet.length; i++) {\n        const difference = Math.abs(inputTime - dataSet[i]);\n        if (difference < closestDifference) {\n          closestValue = dataSet[i];\n          closestDifference = difference;\n        }\n      }\n      return closestValue;\n    },\n    playSound(e) {\n      switch (e.key) {\n        case \"a\":\n          this.noteObject.fileName = \"kick.wav\";\n          this.noteObject.time = Date.now();\n          break;\n        case \"s\":\n          this.noteObject.fileName = \"kick2.wav\";\n          this.noteObject.time = Date.now();\n          break;\n        case \"z\":\n          this.noteObject.fileName = \"kick3.wav\";\n          this.noteObject.time = Date.now();\n          break;\n        case \"x\":\n          this.noteObject.fileName = \"kick4.wav\";\n          this.noteObject.time = Date.now();\n          break;\n        case \"d\":\n          this.noteObject.fileName = \"snare.wav\";\n          this.noteObject.time = Date.now();\n          break;\n        case \"f\":\n          this.noteObject.fileName = \"snare2.wav\";\n          this.noteObject.time = Date.now();\n          break;\n        case \"c\":\n          this.noteObject.fileName = \"snare3.wav\";\n          this.noteObject.time = Date.now();\n          break;\n        case \"v\":\n          this.noteObject.fileName = \"snare4.wav\";\n          this.noteObject.time = Date.now();\n          break;\n        case \"i\":\n          this.noteObject.fileName = \"hihat1.wav\";\n          this.noteObject.time = Date.now();\n          break;\n        case \"o\":\n          this.noteObject.fileName = \"hihat2.wav\";\n          this.noteObject.time = Date.now();\n          break;\n        case \"p\":\n          this.noteObject.fileName = \"hihat3.wav\";\n          this.noteObject.time = Date.now();\n          break;\n        default:\n          this.noteObject.fileName = \"\";\n          this.noteObject.time = Date.now();\n          break;\n      }\n      if (this.noteObject.fileName != \"\") {\n        let audio = new Audio(require(\"../assets/\" + this.noteObject.fileName));\n        audio.play();\n      }\n    },\n    // playSoundRepeat() {\n    //   if (!this.isPlaying || this.sounds === []) {\n    //     setTimeout(this.stopSound, 200);\n    //   } else {\n    //     this.sounds2.forEach((sound) => {\n    //       let audio = new Audio(require(\"../assets/\" + sound));\n    //       audio.play();\n    //     });\n    //     let time = this.findBeats();\n    //     setTimeout(this.playSoundRepeat, time);\n    //   }\n    // },\n\n    playRecording() {\n      this.recording.forEach(audio => {\n        audio.play();\n      });\n    },\n    stopSound() {\n      this.sounds = [];\n    },\n    decrement() {\n      this.bpm--;\n    },\n    increment() {\n      this.bpm++;\n    },\n    toggle() {\n      this.isPlaying = !this.isPlaying;\n    }\n  },\n  created() {\n    window.addEventListener(\"keydown\", this.playSound);\n  },\n  unmounted() {\n    window.removeEventListener(\"keydown\", this.playSound);\n  }\n};","map":{"version":3,"names":["Tone","data","bpm","interval","isPlaying","fileName","recording","checked","barLength","noteObject","time","notes","computed","color","animationDuration","methods","findBeats","noteValue","activateMetronome","metronomeClick","Audio","require","play","setTimeout","pause","findClosestValue","inputTime","startTime","Date","now","dataSet","timeBetweenNotes","i","push","closestValue","closestDifference","Math","abs","length","difference","playSound","e","key","audio","playRecording","forEach","stopSound","sounds","decrement","increment","toggle","created","window","addEventListener","unmounted","removeEventListener"],"sources":["src/components/DrumMachine.vue"],"sourcesContent":["<template>\n  <v-container class=\"about pt-4\">\n    <v-card class=\"mx-auto\" max-width=\"600\">\n      <v-toolbar flat dense>\n        <v-toolbar-title>\n          <span class=\"subheading\">METRONOME</span>\n        </v-toolbar-title>\n        <v-spacer></v-spacer>\n        <v-btn icon>\n          <v-icon>mdi-share-variant</v-icon>\n        </v-btn>\n      </v-toolbar>\n\n      <v-card-text>\n        <v-row class=\"mb-4\" justify=\"space-between\">\n          <v-col class=\"text-left\">\n            <span class=\"text-h2 font-weight-light\" v-text=\"bpm\"></span>\n            <span class=\"subheading font-weight-light mr-1\">BPM</span>\n            <v-fade-transition>\n              <v-avatar\n                v-if=\"isPlaying\"\n                :color=\"color\"\n                :style=\"{\n                  animationDuration: animationDuration,\n                }\"\n                class=\"mb-1 v-avatar--metronome\"\n                size=\"12\"\n              ></v-avatar>\n            </v-fade-transition>\n          </v-col>\n          <v-col class=\"text-right\">\n            <v-btn\n              :color=\"color\"\n              dark\n              depressed\n              fab\n              @click=\"\n                toggle();\n                activateMetronome();\n              \"\n            >\n              <v-icon large>\n                {{ isPlaying ? \"mdi-pause\" : \"mdi-play\" }}\n              </v-icon>\n            </v-btn>\n          </v-col>\n        </v-row>\n\n        <v-slider\n          v-model=\"bpm\"\n          :color=\"color\"\n          track-color=\"grey\"\n          always-dirty\n          min=\"40\"\n          max=\"218\"\n        >\n          <template v-slot:prepend>\n            <v-icon :color=\"color\" @click=\"decrement\"> mdi-minus </v-icon>\n          </template>\n\n          <template v-slot:append>\n            <v-icon :color=\"color\" @click=\"increment\"> mdi-plus </v-icon>\n          </template>\n        </v-slider>\n      </v-card-text>\n    </v-card>\n    <div class=\"d-flex justify-center\">\n      <v-radio-group\n        class=\"radio pl-400 d-flex justify-center\"\n        v-model=\"noteValue\"\n        row\n      >\n        <v-radio label=\"Eighth Note\" value=\".5\"></v-radio>\n        <v-radio label=\"Quarter Note\" value=\"1\"></v-radio>\n        <v-radio label=\"Half Note\" value=\"2\"></v-radio>\n        <v-radio label=\"Whole Note\" value=\"4\"></v-radio>\n      </v-radio-group>\n    </div>\n    <div class=\"d-flex justify-center\">\n      <v-btn\n        class=\"d-flex flex-start\"\n        rounded\n        color=\"primary\"\n        dark\n        @click=\"playRecording()\"\n      >\n        Play Recording\n      </v-btn>\n    </div>\n  </v-container>\n</template>\n\n<script>\nimport * as Tone from \"tone\";\n\nexport default {\n  data: () => ({\n    bpm: 40,\n    interval: null,\n    isPlaying: false,\n    fileName: \"\",\n    recording: [],\n    checked: true,\n    barLength: 0,\n    noteObject: \n    {\n      fileName: \"\",\n      time: \"\",\n    },\n    notes: [],\n  }),\n\n  computed: {\n    color() {\n      if (this.bpm < 100) return \"indigo\";\n      if (this.bpm < 125) return \"teal\";\n      if (this.bpm < 140) return \"green\";\n      if (this.bpm < 175) return \"orange\";\n      return \"red\";\n    },\n    animationDuration() {\n      return `${60 / this.bpm}s`;\n    },\n  },\n\n  methods: {\n    findBeats() {\n      return (60 / this.bpm) * 1000 * this.noteValue;\n    },\n    activateMetronome() {\n      let metronomeClick = new Audio(require(\"../assets/metronome.wav\"));\n      if (this.isPlaying) {\n        metronomeClick.play();\n        let time = (60 / this.bpm) * 1000;\n        setTimeout(this.activateMetronome, time);\n      } else if (!this.isPlaying) {\n        metronomeClick.pause();\n        metronomeClick = new Audio(require(\"../assets/metronome.wav\"));\n      }\n    },\n    \n    findClosestValue(inputTime) {\n      let startTime = Date.now();\n      let dataSet = [startTime];\n      let timeBetweenNotes = 60000\n      for (let i = 1; i <= 7; i++) {\n        (startTime + (60000 / (this.bpm * i))).push(dataSet)\n      }\n      let closestValue = dataSet[0];\n      let closestDifference = Math.abs(inputTime - dataSet[0]);\n      for (let i = 1; i < dataSet.length; i++) {\n        const difference = Math.abs(inputTime - dataSet[i]);\n        if (difference < closestDifference) {\n          closestValue = dataSet[i];\n          closestDifference = difference;\n        }\n      }\n      return closestValue;\n    },\n    playSound(e) {\n      switch (e.key) {\n        case \"a\":\n          this.noteObject.fileName = \"kick.wav\";\n          this.noteObject.time = Date.now();\n          break;\n        case \"s\":\n          this.noteObject.fileName = \"kick2.wav\";\n          this.noteObject.time = Date.now();\n          break;\n        case \"z\":\n          this.noteObject.fileName = \"kick3.wav\";\n          this.noteObject.time = Date.now();\n          break;\n        case \"x\":\n          this.noteObject.fileName = \"kick4.wav\";\n          this.noteObject.time = Date.now();\n          break;\n        case \"d\":\n          this.noteObject.fileName = \"snare.wav\";\n          this.noteObject.time = Date.now();\n          break;\n        case \"f\":\n          this.noteObject.fileName = \"snare2.wav\";\n          this.noteObject.time = Date.now();\n          break;\n        case \"c\":\n          this.noteObject.fileName = \"snare3.wav\";\n          this.noteObject.time = Date.now();\n          break;\n        case \"v\":\n          this.noteObject.fileName = \"snare4.wav\";\n          this.noteObject.time = Date.now();\n          break;\n        case \"i\":\n          this.noteObject.fileName = \"hihat1.wav\";\n          this.noteObject.time = Date.now();\n          break;\n        case \"o\":\n          this.noteObject.fileName = \"hihat2.wav\";\n          this.noteObject.time = Date.now();\n          break;\n        case \"p\":\n          this.noteObject.fileName = \"hihat3.wav\";\n          this.noteObject.time = Date.now();\n          break;\n        default:\n          this.noteObject.fileName = \"\";\n          this.noteObject.time = Date.now();\n          break;\n      }\n      if (this.noteObject.fileName != \"\") {\n        let audio = new Audio(require(\"../assets/\" + this.noteObject.fileName));\n        audio.play();\n      }\n    },\n\n    // playSoundRepeat() {\n    //   if (!this.isPlaying || this.sounds === []) {\n    //     setTimeout(this.stopSound, 200);\n    //   } else {\n    //     this.sounds2.forEach((sound) => {\n    //       let audio = new Audio(require(\"../assets/\" + sound));\n    //       audio.play();\n    //     });\n    //     let time = this.findBeats();\n    //     setTimeout(this.playSoundRepeat, time);\n    //   }\n    // },\n\n    playRecording() {\n      this.recording.forEach((audio) => {\n        audio.play();\n      });\n    },\n    stopSound() {\n      this.sounds = [];\n    },\n    decrement() {\n      this.bpm--;\n    },\n    increment() {\n      this.bpm++;\n    },\n    toggle() {\n      this.isPlaying = !this.isPlaying;\n    },\n  },\n  created() {\n    window.addEventListener(\"keydown\", this.playSound);\n  },\n  unmounted() {\n    window.removeEventListener(\"keydown\", this.playSound);\n  },\n};\n</script>\n\n<style>\n@keyframes metronome-example {\n  from {\n    transform: scale(0.5);\n  }\n\n  to {\n    transform: scale(1);\n  }\n}\n\n/* .v-input--radio-group__input {\n  justify-content: center;\n} */\n\n.v-avatar--metronome {\n  animation-name: metronome-example;\n  animation-iteration-count: infinite;\n  animation-direction: alternate;\n}\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}