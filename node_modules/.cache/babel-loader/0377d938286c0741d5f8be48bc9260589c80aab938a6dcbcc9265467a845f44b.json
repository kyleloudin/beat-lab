{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport * as Tone from \"tone\";\nexport default {\n  data: () => ({\n    recordButton: document.querySelector(\".record\"),\n    metronomeButton: document.querySelector(\".metronome-button\"),\n    bpm: 40,\n    interval: null,\n    isPlaying: false,\n    isRecording: false,\n    isClicking: false,\n    fileName: \"\",\n    checked: true,\n    barLength: 0,\n    noteValue: \"\",\n    noteObject: {\n      fileName: \"\",\n      time: \"\"\n    },\n    notesArray: []\n  }),\n  computed: {\n    color() {\n      if (this.bpm < 100) return \"indigo\";\n      if (this.bpm < 125) return \"teal\";\n      if (this.bpm < 140) return \"green\";\n      if (this.bpm < 175) return \"orange\";\n      return \"red\";\n    },\n    animationDuration() {\n      return `${60 / this.bpm}s`;\n    }\n  },\n  methods: {\n    findBeats() {\n      return 60 / this.bpm * 1000 * this.noteValue;\n    },\n    activateMetronome() {\n      let metronomeClick = new Audio(require(\"../assets/metronome.wav\"));\n      if (this.isClicking) {\n        metronomeClick.play();\n        let time = 60 / this.bpm * 1000;\n        setTimeout(this.activateMetronome, time);\n      } else if (!this.isClicking) {\n        metronomeClick.pause();\n        metronomeClick = new Audio(require(\"../assets/metronome.wav\"));\n      }\n    },\n    findClosestValue(inputTime) {\n      let startTime = Date.now();\n      let dataSet = [];\n      let timeBetweenNotes = 60000 / (this.bpm * 8);\n      for (let i = 0; i <= 7; i++) {\n        (startTime + timeBetweenNotes * i).push(dataSet);\n      }\n      let closestValue = dataSet[0];\n      let closestDifference = Math.abs(inputTime - dataSet[0]);\n      for (let i = 1; i < dataSet.length; i++) {\n        const difference = Math.abs(inputTime - dataSet[i]);\n        if (difference < closestDifference) {\n          closestValue = dataSet[i];\n          closestDifference = difference;\n        }\n      }\n      return closestValue;\n    },\n    playSound(e) {\n      let pushNote;\n      switch (e.key) {\n        case \"a\":\n          pushNote.fileName = \"kick.wav\";\n          pushNote.time = Date.now();\n          break;\n        case \"s\":\n          this.noteObject.fileName = \"kick2.wav\";\n          this.noteObject.time = Date.now();\n          break;\n        case \"z\":\n          this.noteObject.fileName = \"kick3.wav\";\n          this.noteObject.time = Date.now();\n          break;\n        case \"x\":\n          this.noteObject.fileName = \"kick4.wav\";\n          this.noteObject.time = Date.now();\n          break;\n        case \"d\":\n          this.noteObject.fileName = \"snare.wav\";\n          this.noteObject.time = Date.now();\n          break;\n        case \"f\":\n          this.noteObject.fileName = \"snare2.wav\";\n          this.noteObject.time = Date.now();\n          break;\n        case \"c\":\n          this.noteObject.fileName = \"snare3.wav\";\n          this.noteObject.time = Date.now();\n          break;\n        case \"v\":\n          this.noteObject.fileName = \"snare4.wav\";\n          this.noteObject.time = Date.now();\n          break;\n        case \"i\":\n          this.noteObject.fileName = \"hihat1.wav\";\n          this.noteObject.time = Date.now();\n          break;\n        case \"o\":\n          this.noteObject.fileName = \"hihat2.wav\";\n          this.noteObject.time = Date.now();\n          break;\n        case \"p\":\n          this.noteObject.fileName = \"hihat3.wav\";\n          this.noteObject.time = Date.now();\n          break;\n        default:\n          this.noteObject.fileName = \"\";\n          this.noteObject.time = Date.now();\n          break;\n      }\n      if (this.pushNote.fileName != \"\") {\n        let audio = new Audio(require(\"../assets/\" + this.noteObject.fileName));\n        audio.play();\n      }\n      if (this.isRecording) {\n        this.notesArray.push(pushNote);\n      }\n    },\n    // playSoundRepeat() {\n    //   if (!this.isPlaying || this.sounds === []) {\n    //     setTimeout(this.stopSound, 200);\n    //   } else {\n    //     this.sounds2.forEach((sound) => {\n    //       let audio = new Audio(require(\"../assets/\" + sound));\n    //       audio.play();\n    //     });\n    //     let time = this.findBeats();\n    //     setTimeout(this.playSoundRepeat, time);\n    //   }\n    // },\n\n    record() {},\n    playRecording() {},\n    quantize() {\n      findClosestValue();\n    },\n    stopSound() {\n      this.sounds = [];\n    },\n    decrement() {\n      this.bpm--;\n    },\n    increment() {\n      this.bpm++;\n    },\n    toggle(button) {\n      if (button == \"metronome\") {\n        this.isClicking = !this.isClicking;\n      }\n      if (button == \"record\") {\n        this.isRecording = !this.isRecording;\n      }\n      if (button == \"playSong\") {\n        this.isPlaying = !this.isPlaying;\n      }\n      if (button == \"quantize\") {\n        this.isQuantized = !this.isQuantized;\n      }\n    }\n  },\n  created() {\n    window.addEventListener(\"keydown\", this.playSound);\n  },\n  unmounted() {\n    window.removeEventListener(\"keydown\", this.playSound);\n  }\n};","map":{"version":3,"names":["Tone","data","recordButton","document","querySelector","metronomeButton","bpm","interval","isPlaying","isRecording","isClicking","fileName","checked","barLength","noteValue","noteObject","time","notesArray","computed","color","animationDuration","methods","findBeats","activateMetronome","metronomeClick","Audio","require","play","setTimeout","pause","findClosestValue","inputTime","startTime","Date","now","dataSet","timeBetweenNotes","i","push","closestValue","closestDifference","Math","abs","length","difference","playSound","e","pushNote","key","audio","record","playRecording","quantize","stopSound","sounds","decrement","increment","toggle","button","isQuantized","created","window","addEventListener","unmounted","removeEventListener"],"sources":["src/components/DrumMachine.vue"],"sourcesContent":["<template>\n  <v-container class=\"about pt-4\">\n    <v-card class=\"mx-auto\" max-width=\"600\">\n      <v-toolbar flat dense>\n        <v-toolbar-title>\n          <span class=\"subheading\">METRONOME</span>\n        </v-toolbar-title>\n        <v-spacer></v-spacer>\n        <v-btn icon>\n          <v-icon>mdi-share-variant</v-icon>\n        </v-btn>\n      </v-toolbar>\n\n      <v-card-text>\n        <v-row class=\"mb-4\" justify=\"space-between\">\n          <v-col class=\"text-left\">\n            <span class=\"text-h2 font-weight-light\" v-text=\"bpm\"></span>\n            <span class=\"subheading font-weight-light mr-1\">BPM</span>\n            <v-fade-transition>\n              <v-avatar\n                v-if=\"isClicking\"\n                :color=\"color\"\n                :style=\"{\n                  animationDuration: animationDuration,\n                }\"\n                class=\"mb-1 v-avatar--metronome\"\n                size=\"12\"\n              ></v-avatar>\n            </v-fade-transition>\n          </v-col>\n          <v-col class=\"text-right\">\n            <v-btn\n              class=\"metronome-button\"\n              :color=\"color\"\n              dark\n              depressed\n              fab\n              @click=\"\n                toggle('metronome');\n                activateMetronome();\n              \"\n            >\n              <v-icon large>\n                {{ isClicking ? \"mdi-pause\" : \"mdi-play\" }}\n              </v-icon>\n            </v-btn>\n          </v-col>\n        </v-row>\n\n        <v-slider\n          v-model=\"bpm\"\n          :color=\"color\"\n          track-color=\"grey\"\n          always-dirty\n          min=\"40\"\n          max=\"218\"\n        >\n          <template v-slot:prepend>\n            <v-icon :color=\"color\" @click=\"decrement\"> mdi-minus </v-icon>\n          </template>\n\n          <template v-slot:append>\n            <v-icon :color=\"color\" @click=\"increment\"> mdi-plus </v-icon>\n          </template>\n        </v-slider>\n      </v-card-text>\n    </v-card>\n    <div class=\"d-flex justify-center\">\n      <v-radio-group\n        class=\"radio pl-400 d-flex justify-center\"\n        v-model=\"noteValue\"\n        row\n      >\n        <v-radio label=\"Eighth Note\" value=\".5\"></v-radio>\n        <v-radio label=\"Quarter Note\" value=\"1\"></v-radio>\n        <v-radio label=\"Half Note\" value=\"2\"></v-radio>\n        <v-radio label=\"Whole Note\" value=\"4\"></v-radio>\n      </v-radio-group>\n    </div>\n    <div class=\"d-flex justify-center\">\n      <v-btn\n        class=\"record d-flex flex-start\"\n        rounded\n        color=\"primary\"\n        dark\n        @click=\"toggle('record')\"\n      >\n        Record\n      </v-btn>\n      <v-btn\n        class=\"play d-flex flex-start\"\n        rounded\n        color=\"primary\"\n        dark\n        @click=\"toggle('playSong'), playRecording()\"\n      >\n        Play\n      </v-btn>\n      <v-btn\n        class=\"quantize d-flex flex-start\"\n        rounded\n        color=\"primary\"\n        dark\n        @click=\"quantize('quantize')\"\n      >\n        Quantize\n      </v-btn>\n    </div>\n  </v-container>\n</template>\n\n<script>\nimport * as Tone from \"tone\";\n\nexport default {\n  data: () => ({\n    recordButton: document.querySelector(\".record\"),\n    metronomeButton: document.querySelector(\".metronome-button\"),\n    bpm: 40,\n    interval: null,\n    isPlaying: false,\n    isRecording: false,\n    isClicking: false,\n    fileName: \"\",\n    checked: true,\n    barLength: 0,\n    noteValue: \"\",\n    noteObject: {\n      fileName: \"\",\n      time: \"\",\n    },\n    notesArray: [],\n  }),\n\n  computed: {\n    color() {\n      if (this.bpm < 100) return \"indigo\";\n      if (this.bpm < 125) return \"teal\";\n      if (this.bpm < 140) return \"green\";\n      if (this.bpm < 175) return \"orange\";\n      return \"red\";\n    },\n    animationDuration() {\n      return `${60 / this.bpm}s`;\n    },\n  },\n\n  methods: {\n    findBeats() {\n      return (60 / this.bpm) * 1000 * this.noteValue;\n    },\n    activateMetronome() {\n      let metronomeClick = new Audio(require(\"../assets/metronome.wav\"));\n      if (this.isClicking) {\n        metronomeClick.play();\n        let time = (60 / this.bpm) * 1000;\n        setTimeout(this.activateMetronome, time);\n      } else if (!this.isClicking) {\n        metronomeClick.pause();\n        metronomeClick = new Audio(require(\"../assets/metronome.wav\"));\n      }\n    },\n\n    findClosestValue(inputTime) {\n      let startTime = Date.now();\n      let dataSet = [];\n      let timeBetweenNotes = 60000 / (this.bpm * 8);\n      for (let i = 0; i <= 7; i++) {\n        (startTime + timeBetweenNotes * i).push(dataSet);\n      }\n      let closestValue = dataSet[0];\n      let closestDifference = Math.abs(inputTime - dataSet[0]);\n      for (let i = 1; i < dataSet.length; i++) {\n        const difference = Math.abs(inputTime - dataSet[i]);\n        if (difference < closestDifference) {\n          closestValue = dataSet[i];\n          closestDifference = difference;\n        }\n      }\n      return closestValue;\n    },\n\n    playSound(e) {\n      let pushNote;\n      switch (e.key) {\n        case \"a\":\n          pushNote.fileName = \"kick.wav\";\n          pushNote.time = Date.now();\n          break;\n        case \"s\":\n          this.noteObject.fileName = \"kick2.wav\";\n          this.noteObject.time = Date.now();\n          break;\n        case \"z\":\n          this.noteObject.fileName = \"kick3.wav\";\n          this.noteObject.time = Date.now();\n          break;\n        case \"x\":\n          this.noteObject.fileName = \"kick4.wav\";\n          this.noteObject.time = Date.now();\n          break;\n        case \"d\":\n          this.noteObject.fileName = \"snare.wav\";\n          this.noteObject.time = Date.now();\n          break;\n        case \"f\":\n          this.noteObject.fileName = \"snare2.wav\";\n          this.noteObject.time = Date.now();\n          break;\n        case \"c\":\n          this.noteObject.fileName = \"snare3.wav\";\n          this.noteObject.time = Date.now();\n          break;\n        case \"v\":\n          this.noteObject.fileName = \"snare4.wav\";\n          this.noteObject.time = Date.now();\n          break;\n        case \"i\":\n          this.noteObject.fileName = \"hihat1.wav\";\n          this.noteObject.time = Date.now();\n          break;\n        case \"o\":\n          this.noteObject.fileName = \"hihat2.wav\";\n          this.noteObject.time = Date.now();\n          break;\n        case \"p\":\n          this.noteObject.fileName = \"hihat3.wav\";\n          this.noteObject.time = Date.now();\n          break;\n        default:\n          this.noteObject.fileName = \"\";\n          this.noteObject.time = Date.now();\n          break;\n      }\n      if (this.pushNote.fileName != \"\") {\n        let audio = new Audio(require(\"../assets/\" + this.noteObject.fileName));\n        audio.play();\n      }\n      if (this.isRecording) {\n        this.notesArray.push(pushNote);\n      }\n    },\n\n    // playSoundRepeat() {\n    //   if (!this.isPlaying || this.sounds === []) {\n    //     setTimeout(this.stopSound, 200);\n    //   } else {\n    //     this.sounds2.forEach((sound) => {\n    //       let audio = new Audio(require(\"../assets/\" + sound));\n    //       audio.play();\n    //     });\n    //     let time = this.findBeats();\n    //     setTimeout(this.playSoundRepeat, time);\n    //   }\n    // },\n\n    record() {},\n    playRecording() {},\n    quantize() {\n      findClosestValue();\n    },\n    stopSound() {\n      this.sounds = [];\n    },\n    decrement() {\n      this.bpm--;\n    },\n    increment() {\n      this.bpm++;\n    },\n    toggle(button) {\n      if (button == \"metronome\") {\n        this.isClicking = !this.isClicking;\n      }\n      if (button == \"record\") {\n        this.isRecording = !this.isRecording;\n      }\n      if (button == \"playSong\") {\n        this.isPlaying = !this.isPlaying;\n      }\n      if (button == \"quantize\") {\n        this.isQuantized = !this.isQuantized;\n      }\n    },\n  },\n  created() {\n    window.addEventListener(\"keydown\", this.playSound);\n  },\n  unmounted() {\n    window.removeEventListener(\"keydown\", this.playSound);\n  },\n};\n</script>\n\n<style>\n@keyframes metronome-example {\n  from {\n    transform: scale(0.5);\n  }\n\n  to {\n    transform: scale(1);\n  }\n}\n\n/* .v-input--radio-group__input {\n  justify-content: center;\n} */\n\n.v-avatar--metronome {\n  animation-name: metronome-example;\n  animation-iteration-count: infinite;\n  animation-direction: alternate;\n}\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}