{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport * as Tone from \"tone\";\nexport default {\n  data: () => ({\n    bpm: 40,\n    interval: null,\n    isPlaying: false,\n    fileName: \"\",\n    noteValue: \"\",\n    recording: [],\n    sounds: [],\n    valueOfNotes: [],\n    checked: true,\n    sounds2: [],\n    barLength: 0,\n    metronomeClick: new Audio(require(\"../assets/metronome.wav\"))\n  }),\n  computed: {\n    color() {\n      if (this.bpm < 100) return \"indigo\";\n      if (this.bpm < 125) return \"teal\";\n      if (this.bpm < 140) return \"green\";\n      if (this.bpm < 175) return \"orange\";\n      return \"red\";\n    },\n    animationDuration() {\n      return `${60 / this.bpm}s`;\n    }\n  },\n  methods: {\n    findBeats() {\n      return 60 / this.bpm * 1000 * this.noteValue;\n    },\n    activateMetronome() {\n      if (!this.isPlaying) {\n        this.metronomeClick.pause();\n      } else {\n        this.metronomeClick.play();\n        // let time = (60 / this.bpm) * 1000;\n        setTimeout(this.activateMetronome, 100);\n      }\n    },\n    playSound(e) {\n      let fileName;\n      switch (e.key) {\n        case \"a\":\n          fileName = \"kick.wav\";\n          break;\n        case \"s\":\n          fileName = \"kick2.wav\";\n          break;\n        case \"z\":\n          fileName = \"kick3.wav\";\n          break;\n        case \"x\":\n          fileName = \"kick4.wav\";\n          break;\n        case \"d\":\n          fileName = \"snare.wav\";\n          break;\n        case \"f\":\n          fileName = \"snare2.wav\";\n          break;\n        case \"c\":\n          fileName = \"snare3.wav\";\n          break;\n        case \"v\":\n          fileName = \"snare4.wav\";\n          break;\n        case \"i\":\n          fileName = \"hihat1.wav\";\n          break;\n        case \"o\":\n          fileName = \"hihat2.wav\";\n          break;\n        case \"p\":\n          fileName = \"hihat3.wav\";\n          break;\n        default:\n          fileName = \"\";\n          break;\n      }\n      if (fileName != \"\" && this.noteValue != \"\") {\n        let audio = new Audio(require(\"../assets/\" + fileName));\n        this.fileName = fileName;\n        this.sounds.push(audio);\n        this.sounds2.push(fileName);\n        this.valueOfNotes.push(this.noteValue);\n        audio.play();\n      }\n    },\n    playSoundRepeat() {\n      if (!this.isPlaying || this.sounds === []) {\n        setTimeout(this.stopSound, 200);\n      } else {\n        this.sounds2.forEach(sound => {\n          let audio = new Audio(require(\"../assets/\" + sound));\n          audio.play();\n        });\n        let time = this.findBeats();\n        setTimeout(this.playSoundRepeat, time);\n      }\n    },\n    playRecording() {\n      this.recording.forEach(audio => {\n        audio.play();\n      });\n    },\n    stopSound() {\n      this.sounds = [];\n    },\n    decrement() {\n      this.bpm--;\n    },\n    increment() {\n      this.bpm++;\n    },\n    toggle() {\n      this.isPlaying = !this.isPlaying;\n    }\n  },\n  created() {\n    window.addEventListener(\"keydown\", this.playSound);\n  },\n  unmounted() {\n    window.removeEventListener(\"keydown\", this.playSound);\n  }\n};","map":{"version":3,"names":["Tone","data","bpm","interval","isPlaying","fileName","noteValue","recording","sounds","valueOfNotes","checked","sounds2","barLength","metronomeClick","Audio","require","computed","color","animationDuration","methods","findBeats","activateMetronome","pause","play","setTimeout","playSound","e","key","audio","push","playSoundRepeat","stopSound","forEach","sound","time","playRecording","decrement","increment","toggle","created","window","addEventListener","unmounted","removeEventListener"],"sources":["src/components/DrumMachine.vue"],"sourcesContent":["<template>\n  <v-container class=\"about pt-4\">\n    <v-card class=\"mx-auto\" max-width=\"600\">\n      <v-toolbar flat dense>\n        <v-toolbar-title>\n          <span class=\"subheading\">METRONOME</span>\n        </v-toolbar-title>\n        <v-spacer></v-spacer>\n        <v-btn icon>\n          <v-icon>mdi-share-variant</v-icon>\n        </v-btn>\n      </v-toolbar>\n\n      <v-card-text>\n        <v-row class=\"mb-4\" justify=\"space-between\">\n          <v-col class=\"text-left\">\n            <span class=\"text-h2 font-weight-light\" v-text=\"bpm\"></span>\n            <span class=\"subheading font-weight-light mr-1\">BPM</span>\n            <v-fade-transition>\n              <v-avatar\n                v-if=\"isPlaying\"\n                :color=\"color\"\n                :style=\"{\n                  animationDuration: animationDuration,\n                }\"\n                class=\"mb-1 v-avatar--metronome\"\n                size=\"12\"\n              ></v-avatar>\n            </v-fade-transition>\n          </v-col>\n          <v-col class=\"text-right\">\n            <v-btn\n              :color=\"color\"\n              dark\n              depressed\n              fab\n              @click=\"\n                toggle();\n                activateMetronome();\n              \"\n            >\n              <v-icon large>\n                {{ isPlaying ? \"mdi-pause\" : \"mdi-play\" }}\n              </v-icon>\n            </v-btn>\n          </v-col>\n        </v-row>\n\n        <v-slider\n          v-model=\"bpm\"\n          :color=\"color\"\n          track-color=\"grey\"\n          always-dirty\n          min=\"40\"\n          max=\"218\"\n        >\n          <template v-slot:prepend>\n            <v-icon :color=\"color\" @click=\"decrement\"> mdi-minus </v-icon>\n          </template>\n\n          <template v-slot:append>\n            <v-icon :color=\"color\" @click=\"increment\"> mdi-plus </v-icon>\n          </template>\n        </v-slider>\n      </v-card-text>\n    </v-card>\n    <div class=\"d-flex justify-center\">\n      <v-radio-group\n        class=\"radio pl-400 d-flex justify-center\"\n        v-model=\"noteValue\"\n        row\n      >\n        <v-radio label=\"Eighth Note\" value=\".5\"></v-radio>\n        <v-radio label=\"Quarter Note\" value=\"1\"></v-radio>\n        <v-radio label=\"Half Note\" value=\"2\"></v-radio>\n        <v-radio label=\"Whole Note\" value=\"4\"></v-radio>\n      </v-radio-group>\n    </div>\n    <div class=\"d-flex justify-center\">\n      <v-btn\n        class=\"d-flex flex-start\"\n        rounded\n        color=\"primary\"\n        dark\n        @click=\"playRecording()\"\n      >\n        Play Recording\n      </v-btn>\n    </div>\n  </v-container>\n</template>\n\n<script>\nimport * as Tone from \"tone\";\n\nexport default {\n  data: () => ({\n    bpm: 40,\n    interval: null,\n    isPlaying: false,\n    fileName: \"\",\n    noteValue: \"\",\n    recording: [],\n    sounds: [],\n    valueOfNotes: [],\n    checked: true,\n    sounds2: [],\n    barLength: 0,\n    metronomeClick: new Audio(require(\"../assets/metronome.wav\")),\n  }),\n\n  computed: {\n    color() {\n      if (this.bpm < 100) return \"indigo\";\n      if (this.bpm < 125) return \"teal\";\n      if (this.bpm < 140) return \"green\";\n      if (this.bpm < 175) return \"orange\";\n      return \"red\";\n    },\n    animationDuration() {\n      return `${60 / this.bpm}s`;\n    },\n  },\n\n  methods: {\n    findBeats() {\n      return (60 / this.bpm) * 1000 * this.noteValue;\n    },\n    activateMetronome() {\n      if (!this.isPlaying) {\n        this.metronomeClick.pause();\n      } else { \n      this.metronomeClick.play();\n      // let time = (60 / this.bpm) * 1000;\n      setTimeout(this.activateMetronome, 100);\n      }\n    },\n    playSound(e) {\n      let fileName;\n      switch (e.key) {\n        case \"a\":\n          fileName = \"kick.wav\";\n          break;\n        case \"s\":\n          fileName = \"kick2.wav\";\n          break;\n        case \"z\":\n          fileName = \"kick3.wav\";\n          break;\n        case \"x\":\n          fileName = \"kick4.wav\";\n          break;\n        case \"d\":\n          fileName = \"snare.wav\";\n          break;\n        case \"f\":\n          fileName = \"snare2.wav\";\n          break;\n        case \"c\":\n          fileName = \"snare3.wav\";\n          break;\n        case \"v\":\n          fileName = \"snare4.wav\";\n          break;\n        case \"i\":\n          fileName = \"hihat1.wav\";\n          break;\n        case \"o\":\n          fileName = \"hihat2.wav\";\n          break;\n        case \"p\":\n          fileName = \"hihat3.wav\";\n          break;\n        default:\n          fileName = \"\";\n          break;\n      }\n      if (fileName != \"\" && this.noteValue != \"\") {\n        let audio = new Audio(require(\"../assets/\" + fileName));\n        this.fileName = fileName;\n        this.sounds.push(audio);\n        this.sounds2.push(fileName);\n        this.valueOfNotes.push(this.noteValue);\n        audio.play();\n      }\n    },\n\n    playSoundRepeat() {\n      if (!this.isPlaying || this.sounds === []) {\n        setTimeout(this.stopSound, 200);\n      } else {\n        this.sounds2.forEach((sound) => {\n          let audio = new Audio(require(\"../assets/\" + sound));\n          audio.play();\n        });\n        let time = this.findBeats();\n        setTimeout(this.playSoundRepeat, time);\n      }\n    },\n    playRecording() {\n      this.recording.forEach((audio) => {\n        audio.play();\n      });\n    },\n    stopSound() {\n      this.sounds = [];\n    },\n    decrement() {\n      this.bpm--;\n    },\n    increment() {\n      this.bpm++;\n    },\n    toggle() {\n      this.isPlaying = !this.isPlaying;\n    },\n  },\n  created() {\n    window.addEventListener(\"keydown\", this.playSound);\n  },\n  unmounted() {\n    window.removeEventListener(\"keydown\", this.playSound);\n  },\n};\n</script>\n\n<style>\n@keyframes metronome-example {\n  from {\n    transform: scale(0.5);\n  }\n\n  to {\n    transform: scale(1);\n  }\n}\n\n/* .v-input--radio-group__input {\n  justify-content: center;\n} */\n\n.v-avatar--metronome {\n  animation-name: metronome-example;\n  animation-iteration-count: infinite;\n  animation-direction: alternate;\n}\n</style>\n"],"mappings":";AA6FA,YAAAA,IAAA;AAEA;EACAC,IAAA,EAAAA,CAAA;IACAC,GAAA;IACAC,QAAA;IACAC,SAAA;IACAC,QAAA;IACAC,SAAA;IACAC,SAAA;IACAC,MAAA;IACAC,YAAA;IACAC,OAAA;IACAC,OAAA;IACAC,SAAA;IACAC,cAAA,MAAAC,KAAA,CAAAC,OAAA;EACA;EAEAC,QAAA;IACAC,MAAA;MACA,SAAAf,GAAA;MACA,SAAAA,GAAA;MACA,SAAAA,GAAA;MACA,SAAAA,GAAA;MACA;IACA;IACAgB,kBAAA;MACA,oBAAAhB,GAAA;IACA;EACA;EAEAiB,OAAA;IACAC,UAAA;MACA,iBAAAlB,GAAA,eAAAI,SAAA;IACA;IACAe,kBAAA;MACA,UAAAjB,SAAA;QACA,KAAAS,cAAA,CAAAS,KAAA;MACA;QACA,KAAAT,cAAA,CAAAU,IAAA;QACA;QACAC,UAAA,MAAAH,iBAAA;MACA;IACA;IACAI,UAAAC,CAAA;MACA,IAAArB,QAAA;MACA,QAAAqB,CAAA,CAAAC,GAAA;QACA;UACAtB,QAAA;UACA;QACA;UACAA,QAAA;UACA;QACA;UACAA,QAAA;UACA;QACA;UACAA,QAAA;UACA;QACA;UACAA,QAAA;UACA;QACA;UACAA,QAAA;UACA;QACA;UACAA,QAAA;UACA;QACA;UACAA,QAAA;UACA;QACA;UACAA,QAAA;UACA;QACA;UACAA,QAAA;UACA;QACA;UACAA,QAAA;UACA;QACA;UACAA,QAAA;UACA;MAAA;MAEA,IAAAA,QAAA,eAAAC,SAAA;QACA,IAAAsB,KAAA,OAAAd,KAAA,CAAAC,OAAA,gBAAAV,QAAA;QACA,KAAAA,QAAA,GAAAA,QAAA;QACA,KAAAG,MAAA,CAAAqB,IAAA,CAAAD,KAAA;QACA,KAAAjB,OAAA,CAAAkB,IAAA,CAAAxB,QAAA;QACA,KAAAI,YAAA,CAAAoB,IAAA,MAAAvB,SAAA;QACAsB,KAAA,CAAAL,IAAA;MACA;IACA;IAEAO,gBAAA;MACA,UAAA1B,SAAA,SAAAI,MAAA;QACAgB,UAAA,MAAAO,SAAA;MACA;QACA,KAAApB,OAAA,CAAAqB,OAAA,CAAAC,KAAA;UACA,IAAAL,KAAA,OAAAd,KAAA,CAAAC,OAAA,gBAAAkB,KAAA;UACAL,KAAA,CAAAL,IAAA;QACA;QACA,IAAAW,IAAA,QAAAd,SAAA;QACAI,UAAA,MAAAM,eAAA,EAAAI,IAAA;MACA;IACA;IACAC,cAAA;MACA,KAAA5B,SAAA,CAAAyB,OAAA,CAAAJ,KAAA;QACAA,KAAA,CAAAL,IAAA;MACA;IACA;IACAQ,UAAA;MACA,KAAAvB,MAAA;IACA;IACA4B,UAAA;MACA,KAAAlC,GAAA;IACA;IACAmC,UAAA;MACA,KAAAnC,GAAA;IACA;IACAoC,OAAA;MACA,KAAAlC,SAAA,SAAAA,SAAA;IACA;EACA;EACAmC,QAAA;IACAC,MAAA,CAAAC,gBAAA,iBAAAhB,SAAA;EACA;EACAiB,UAAA;IACAF,MAAA,CAAAG,mBAAA,iBAAAlB,SAAA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}