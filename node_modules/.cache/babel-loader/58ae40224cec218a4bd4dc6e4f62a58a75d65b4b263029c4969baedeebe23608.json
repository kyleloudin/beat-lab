{"ast":null,"code":"export default {\n  data() {\n    return {\n      keyboard: ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0', 'Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I', 'O', 'P', 'A', 'S', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'Z', 'X', 'C', 'V', 'B', 'N', 'M']\n    };\n  },\n  methods: {\n    handleKey(key) {\n      // Handle the key press event\n      console.log('Key Pressed:', key);\n    }\n  }\n};","map":{"version":3,"names":["data","keyboard","methods","handleKey","key","console","log"],"sources":["src/components/DrumMachine.vue"],"sourcesContent":["<!-- <template>\n  <v-container class=\"about pt-4\">\n    <v-card class=\"mx-auto\" max-width=\"600\">\n      <v-toolbar flat dense>\n        <v-toolbar-title>\n          <span class=\"subheading\">METRONOME</span>\n        </v-toolbar-title>\n        <v-spacer></v-spacer>\n        <v-btn icon>\n          <v-icon>mdi-share-variant</v-icon>\n        </v-btn>\n      </v-toolbar>\n\n      <v-card-text>\n        <v-row class=\"mb-4\" justify=\"space-between\">\n          <v-col class=\"text-left\">\n            <span class=\"text-h2 font-weight-light\" v-text=\"bpm\"></span>\n            <span class=\"subheading font-weight-light mr-1\">BPM</span>\n            <v-fade-transition>\n              <v-avatar\n                v-if=\"isPlaying\"\n                :color=\"color\"\n                :style=\"{\n                  animationDuration: animationDuration,\n                }\"\n                class=\"mb-1 v-avatar--metronome\"\n                size=\"12\"\n              ></v-avatar>\n            </v-fade-transition>\n          </v-col>\n          <v-col class=\"text-right\">\n            <v-btn\n              :color=\"color\"\n              dark\n              depressed\n              fab\n              @click=\"\n                toggle();\n                playSoundRepeat();\n              \"\n            >\n              <v-icon large>\n                {{ isPlaying ? \"mdi-pause\" : \"mdi-play\" }}\n              </v-icon>\n            </v-btn>\n          </v-col>\n        </v-row>\n\n        <v-slider\n          v-model=\"bpm\"\n          :color=\"color\"\n          track-color=\"grey\"\n          always-dirty\n          min=\"40\"\n          max=\"218\"\n        >\n          <template v-slot:prepend>\n            <v-icon :color=\"color\" @click=\"decrement\"> mdi-minus </v-icon>\n          </template>\n\n          <template v-slot:append>\n            <v-icon :color=\"color\" @click=\"increment\"> mdi-plus </v-icon>\n          </template>\n        </v-slider>\n      </v-card-text>\n    </v-card>\n    <div class=\"d-flex justify-center\">\n      <v-radio-group\n        class=\"radio pl-400 d-flex justify-center\"\n        v-model=\"noteValue\"\n        row\n      >\n        <v-radio label=\"Eighth Note\" value=\".5\"></v-radio>\n        <v-radio label=\"Quarter Note\" value=\"1\"></v-radio>\n        <v-radio label=\"Half Note\" value=\"2\"></v-radio>\n        <v-radio label=\"Whole Note\" value=\"4\"></v-radio>\n      </v-radio-group>\n    </div>\n    <div class=\"d-flex justify-center\">\n      <v-btn\n        class=\"d-flex flex-start\"\n        rounded\n        color=\"primary\"\n        dark\n        @click=\"playRecording()\"\n      >\n        Play Recording\n      </v-btn>\n    </div>\n  </v-container>\n</template>\n\n<script>\nexport default {\n  data: () => ({\n    bpm: 40,\n    interval: null,\n    isPlaying: false,\n    fileName: \"\",\n    noteValue: \"\",\n    recording: [],\n    sounds: [],\n    valueOfNotes: [],\n    checked: true,\n    sounds2: [],\n  }),\n\n  computed: {\n    color() {\n      if (this.bpm < 100) return \"indigo\";\n      if (this.bpm < 125) return \"teal\";\n      if (this.bpm < 140) return \"green\";\n      if (this.bpm < 175) return \"orange\";\n      return \"red\";\n    },\n    animationDuration() {\n      return `${60 / this.bpm}s`;\n    },\n  },\n\n  methods: {\n    findBeats() {\n      return (60 / this.bpm) * 1000 * this.noteValue;\n    },\n    playSound(e) {\n      let fileName;\n      switch (e.key) {\n        case \"a\":\n          fileName = \"kick.wav\";\n          break;\n        case \"s\":\n          fileName = \"kick2.wav\";\n          break;\n        case \"z\":\n          fileName = \"kick3.wav\";\n          break;\n        case \"x\":\n          fileName = \"kick4.wav\";\n          break;\n        case \"d\":\n          fileName = \"snare.wav\";\n          break;\n        case \"f\":\n          fileName = \"snare2.wav\";\n          break;\n        case \"c\":\n          fileName = \"snare3.wav\";\n          break;\n        case \"v\":\n          fileName = \"snare4.wav\";\n          break;\n        case \"i\":\n          fileName = \"hihat1.wav\";\n          break;\n        case \"o\":\n          fileName = \"hihat2.wav\";\n          break;\n        case \"p\":\n          fileName = \"hihat3.wav\";\n          break;\n        default:\n          fileName = \"\";\n          break;\n      }\n      if (fileName != \"\" && this.noteValue != \"\") {\n        let audio = new Audio(require(\"../assets/\" + fileName));\n        this.fileName = fileName;\n        this.sounds.push(audio);\n        this.sounds2.push(fileName);\n        this.valueOfNotes.push(this.noteValue);\n        audio.play();\n      }\n    },\n\n    playSoundRepeat() {\n      if (!this.isPlaying || this.sounds === []) {\n        setTimeout(this.stopSound, 200);\n      } else {\n        this.sounds2.forEach((sound) => {\n          let audio = new Audio(require(\"../assets/\" + sound));\n          audio.play();\n        });\n        let time = this.findBeats();\n        setTimeout(this.playSoundRepeat, time);\n      }\n    },\n    playRecording() {\n      this.recording.forEach((audio) => {\n        audio.play();\n      });\n    },\n    stopSound() {\n      this.sounds = [];\n    },\n    decrement() {\n      this.bpm--;\n    },\n    increment() {\n      this.bpm++;\n    },\n    toggle() {\n      this.isPlaying = !this.isPlaying;\n    },\n  },\n  created() {\n    window.addEventListener(\"keydown\", this.playSound);\n  },\n  unmounted() {\n    window.removeEventListener(\"keydown\", this.playSound);\n  },\n};\n</script>\n\n<style>\n@keyframes metronome-example {\n  from {\n    transform: scale(0.5);\n  }\n\n  to {\n    transform: scale(1);\n  }\n}\n\n/* .v-input--radio-group__input {\n  justify-content: center;\n} */\n\n.v-avatar--metronome {\n  animation-name: metronome-example;\n  animation-iteration-count: infinite;\n  animation-direction: alternate;\n}\n</style> -->\n\n\n\n\n\n<template>\n  <v-container class=\"keyboard-container\">\n    <v-row class=\"keyboard-row\">\n      <v-btn\n        v-for=\"key in keyboard\"\n        :key=\"key\"\n        @click=\"handleKey(key)\"\n        class=\"keyboard-key\"\n      >\n        {{ key }}\n      </v-btn>\n    </v-row>\n  </v-container>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      keyboard: [\n        '1', '2', '3', '4', '5', '6', '7', '8', '9', '0',\n        'Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I', 'O', 'P',\n        'A', 'S', 'D', 'F', 'G', 'H', 'J', 'K', 'L',\n        'Z', 'X', 'C', 'V', 'B', 'N', 'M'\n      ]\n    };\n  },\n  methods: {\n    handleKey(key) {\n      // Handle the key press event\n      console.log('Key Pressed:', key);\n    }\n  }\n};\n</script>\n\n<style>\n.keyboard-container {\n  background-color: #f0f0f0;\n  padding: 10px;\n}\n\n.keyboard-row {\n  display: flex;\n  justify-content: center;\n}\n\n.keyboard-key {\n  margin: 5px;\n  min-width: 40px;\n  height: 40px;\n  text-align: center;\n  font-size: 16px;\n  border-radius: 4px;\n  background-color: #e0e0e0;\n  color: #333333;\n  cursor: pointer;\n}\n\n.keyboard-key:hover {\n  background-color: #d0d0d0;\n}\n\n.keyboard-key:active {\n  background-color: #c0c0c0;\n}\n</style>"],"mappings":"AA+PA;EACAA,KAAA;IACA;MACAC,QAAA,GACA,kDACA,kDACA,6CACA;IAEA;EACA;EACAC,OAAA;IACAC,UAAAC,GAAA;MACA;MACAC,OAAA,CAAAC,GAAA,iBAAAF,GAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}